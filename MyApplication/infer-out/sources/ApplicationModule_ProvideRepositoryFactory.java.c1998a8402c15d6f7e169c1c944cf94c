package com.zeyad.cleanarchitecture.presentation.internal.di.modules;

import com.zeyad.cleanarchitecture.data.repository.DataRepository;
import com.zeyad.cleanarchitecture.domain.repository.Repository;
import dagger.internal.Factory;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class ApplicationModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final ApplicationModule module;
  private final Provider<DataRepository> dataRepositoryProvider;

  public ApplicationModule_ProvideRepositoryFactory(ApplicationModule module, Provider<DataRepository> dataRepositoryProvider) {  
    assert module != null;
    this.module = module;
    assert dataRepositoryProvider != null;
    this.dataRepositoryProvider = dataRepositoryProvider;
  }

  @Override
  public Repository get() {  
    Repository provided = module.provideRepository(dataRepositoryProvider.get());
    if (provided == null) {
      throw new NullPointerException("Cannot return null from a non-@Nullable @Provides method");
    }
    return provided;
  }

  public static Factory<Repository> create(ApplicationModule module, Provider<DataRepository> dataRepositoryProvider) {  
    return new ApplicationModule_ProvideRepositoryFactory(module, dataRepositoryProvider);
  }
}

