package com.zeyad.cleanarchitecture.presentation.internal.di.modules;

import com.zeyad.cleanarchitecture.domain.executors.PostExecutionThread;
import com.zeyad.cleanarchitecture.domain.executors.ThreadExecutor;
import com.zeyad.cleanarchitecture.domain.interactors.GenericUseCase;
import com.zeyad.cleanarchitecture.domain.repository.Repository;
import dagger.internal.Factory;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class ActivityModule_ProvidesGetGeneralListUseCaseFactory implements Factory<GenericUseCase> {
  private final ActivityModule module;
  private final Provider<Repository> repositoryProvider;
  private final Provider<ThreadExecutor> threadExecutorProvider;
  private final Provider<PostExecutionThread> postExecutionThreadProvider;

  public ActivityModule_ProvidesGetGeneralListUseCaseFactory(ActivityModule module, Provider<Repository> repositoryProvider, Provider<ThreadExecutor> threadExecutorProvider, Provider<PostExecutionThread> postExecutionThreadProvider) {  
    assert module != null;
    this.module = module;
    assert repositoryProvider != null;
    this.repositoryProvider = repositoryProvider;
    assert threadExecutorProvider != null;
    this.threadExecutorProvider = threadExecutorProvider;
    assert postExecutionThreadProvider != null;
    this.postExecutionThreadProvider = postExecutionThreadProvider;
  }

  @Override
  public GenericUseCase get() {  
    GenericUseCase provided = module.providesGetGeneralListUseCase(repositoryProvider.get(), threadExecutorProvider.get(), postExecutionThreadProvider.get());
    if (provided == null) {
      throw new NullPointerException("Cannot return null from a non-@Nullable @Provides method");
    }
    return provided;
  }

  public static Factory<GenericUseCase> create(ActivityModule module, Provider<Repository> repositoryProvider, Provider<ThreadExecutor> threadExecutorProvider, Provider<PostExecutionThread> postExecutionThreadProvider) {  
    return new ActivityModule_ProvidesGetGeneralListUseCaseFactory(module, repositoryProvider, threadExecutorProvider, postExecutionThreadProvider);
  }
}

