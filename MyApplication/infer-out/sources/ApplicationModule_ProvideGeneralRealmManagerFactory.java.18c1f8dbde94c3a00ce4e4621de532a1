package com.zeyad.cleanarchitecture.presentation.internal.di.modules;

import com.zeyad.cleanarchitecture.data.db.DataBaseManager;
import com.zeyad.cleanarchitecture.data.db.GeneralRealmManager;
import dagger.internal.Factory;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated("dagger.internal.codegen.ComponentProcessor")
public final class ApplicationModule_ProvideGeneralRealmManagerFactory implements Factory<GeneralRealmManager> {
  private final ApplicationModule module;
  private final Provider<GeneralRealmManagerImpl> generalRealmManagerProvider;

  public ApplicationModule_ProvideGeneralRealmManagerFactory(ApplicationModule module, Provider<GeneralRealmManagerImpl> generalRealmManagerProvider) {  
    assert module != null;
    this.module = module;
    assert generalRealmManagerProvider != null;
    this.generalRealmManagerProvider = generalRealmManagerProvider;
  }

  @Override
  public GeneralRealmManager get() {  
    GeneralRealmManager provided = module.provideGeneralRealmManager(generalRealmManagerProvider.get());
    if (provided == null) {
      throw new NullPointerException("Cannot return null from a non-@Nullable @Provides method");
    }
    return provided;
  }

  public static Factory<GeneralRealmManager> create(ApplicationModule module, Provider<GeneralRealmManagerImpl> generalRealmManagerProvider) {  
    return new ApplicationModule_ProvideGeneralRealmManagerFactory(module, generalRealmManagerProvider);
  }
}

